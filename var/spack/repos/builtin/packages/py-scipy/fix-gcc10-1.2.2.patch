diff --git a/spack-src/scipy/_build_utils/_fortran.py b/spack-src2/scipy/_build_utils/_fortran.py
index 8bb5fc9..0facece 100755
--- a/spack-src/scipy/_build_utils/_fortran.py
+++ b/spack-src2/scipy/_build_utils/_fortran.py
@@ -5,7 +5,7 @@ from distutils.dep_util import newer
 
 
 __all__ = ['needs_g77_abi_wrapper', 'split_fortran_files',
-           'get_g77_abi_wrappers']
+           'get_g77_abi_wrappers', 'gfortran_legacy_flag_hook']
 
 
 def uses_mkl(info):
@@ -43,6 +43,29 @@ def get_g77_abi_wrappers(info):
     return wrapper_sources
 
 
+def gfortran_legacy_flag_hook(cmd, ext):
+    """
+    Pre-build hook to add dd gfortran legacy flag -fallow-argument-mismatch
+    """
+    from distutils.version import LooseVersion
+
+    if isinstance(ext, dict):
+        # build_clib
+        compilers = ((cmd._f_compiler, ext.setdefault('extra_f77_compile_args', [])),
+                      (cmd._f_compiler, ext.setdefault('extra_f90_compile_args', [])))
+    else:
+        # build_ext
+        compilers = ((cmd._f77_compiler, ext.extra_f77_compile_args),
+                     (cmd._f90_compiler, ext.extra_f90_compile_args))
+
+    for compiler, args in compilers:
+        if compiler is None:
+            continue
+
+        if compiler.compiler_type == "gnu95" and compiler.version >= LooseVersion("10"):
+            args.append("-fallow-argument-mismatch")
+
+
 def split_fortran_files(source_dir, subroutines=None):
     """Split each file in `source_dir` into separate files per subroutine.
 
diff --git a/spack-src/scipy/linalg/setup.py b/spack-src2/scipy/linalg/setup.py
index 783a301..0196e0d 100755
--- a/spack-src/scipy/linalg/setup.py
+++ b/spack-src2/scipy/linalg/setup.py
@@ -8,7 +8,7 @@ def configuration(parent_package='', top_path=None):
     from distutils.sysconfig import get_python_inc
     from scipy._build_utils.system_info import get_info, NotFoundError, numpy_info
     from numpy.distutils.misc_util import Configuration, get_numpy_include_dirs
-    from scipy._build_utils import (get_g77_abi_wrappers, split_fortran_files)
+    from scipy._build_utils import (get_g77_abi_wrappers, split_fortran_files, gfortran_legacy_flag_hook)
 
     config = Configuration('linalg', parent_package, top_path)
 
@@ -118,9 +118,10 @@ def configuration(parent_package='', top_path=None):
     fnames = split_fortran_files(join(dirname, 'src', 'id_dist', 'src'),
                                  routines_to_split)
     fnames = [join('src', 'id_dist', 'src', f) for f in fnames]
-    config.add_extension('_interpolative', fnames + ["interpolative.pyf"],
-                         extra_info=lapack_opt
-                         )
+    ext = config.add_extension('_interpolative', fnames + ["interpolative.pyf"],
+                               extra_info=lapack_opt
+                               )
+    ext._pre_build_hook = gfortran_legacy_flag_hook
 
     # _solve_toeplitz:
     config.add_extension('_solve_toeplitz',
diff --git a/spack-src/scipy/optimize/setup.py b/spack-src2/scipy/optimize/setup.py
index 0ecd7e0..4bf1a19 100755
--- a/spack-src/scipy/optimize/setup.py
+++ b/spack-src2/scipy/optimize/setup.py
@@ -8,6 +8,8 @@ from scipy._build_utils import numpy_nodepr_api
 def configuration(parent_package='',top_path=None):
     from numpy.distutils.misc_util import Configuration
     from scipy._build_utils.system_info import get_info
+    from scipy._build_utils import gfortran_legacy_flag_hook
+
     config = Configuration('optimize',parent_package, top_path)
 
     include_dirs = [join(os.path.dirname(__file__), '..', '_lib', 'src')]
@@ -65,12 +67,14 @@ def configuration(parent_package='',top_path=None):
                          **numpy_nodepr_api)
 
     sources = ['slsqp.pyf', 'slsqp_optmz.f']
-    config.add_extension('_slsqp', sources=[join('slsqp', x) for x in sources],
-                         **numpy_nodepr_api)
-
-    config.add_extension('_nnls', sources=[join('nnls', x)
-                                          for x in ["nnls.f","nnls.pyf"]],
-                         **numpy_nodepr_api)
+    ext = config.add_extension('_slsqp', sources=[join('slsqp', x) for x in sources],
+                               **numpy_nodepr_api)
+    ext._pre_build_hook = gfortran_legacy_flag_hook
+
+    ext = config.add_extension('_nnls', sources=[join('nnls', x)
+                                                 for x in ["nnls.f","nnls.pyf"]],
+                               **numpy_nodepr_api)
+    ext._pre_build_hook = gfortran_legacy_flag_hook
 
     config.add_extension('_group_columns', sources=['_group_columns.c'],)
 
diff --git a/spack-src/scipy/sparse/linalg/eigen/arpack/setup.py b/spack-src2/scipy/sparse/linalg/eigen/arpack/setup.py
index dac0991..088e325 100755
--- a/spack-src/scipy/sparse/linalg/eigen/arpack/setup.py
+++ b/spack-src2/scipy/sparse/linalg/eigen/arpack/setup.py
@@ -6,7 +6,8 @@ from os.path import join
 def configuration(parent_package='',top_path=None):
     from scipy._build_utils.system_info import get_info, NotFoundError
     from numpy.distutils.misc_util import Configuration
-    from scipy._build_utils import get_g77_abi_wrappers
+    from scipy._build_utils import (get_g77_abi_wrappers,
+                                    gfortran_legacy_flag_hook)
 
     lapack_opt = get_info('lapack_opt')
 
@@ -18,15 +19,17 @@ def configuration(parent_package='',top_path=None):
     arpack_sources += get_g77_abi_wrappers(lapack_opt)
 
     config.add_library('arpack_scipy', sources=arpack_sources,
-                       include_dirs=[join('ARPACK', 'SRC')])
+                       include_dirs=[join('ARPACK', 'SRC')],
+                       _pre_build_hook=gfortran_legacy_flag_hook)
 
     ext_sources = ['arpack.pyf.src']
-    config.add_extension('_arpack',
-                         sources=ext_sources,
-                         libraries=['arpack_scipy'],
-                         extra_info=lapack_opt,
-                         depends=arpack_sources,
-                         )
+    ext = config.add_extension('_arpack',
+                               sources=ext_sources,
+                               libraries=['arpack_scipy'],
+                               extra_info=lapack_opt,
+                               depends=arpack_sources,
+                               )
+    ext._pre_build_hook = gfortran_legacy_flag_hook
 
     config.add_data_dir('tests')
 
diff --git a/spack-src/setup.py b/spack-src2/setup.py
index de6d15e..be19851 100755
--- a/spack-src/setup.py
+++ b/spack-src2/setup.py
@@ -201,6 +201,16 @@ def get_build_ext_override():
     from numpy.distutils.command.build_ext import build_ext as old_build_ext
 
     class build_ext(old_build_ext):
+        def finalize_options(self):
+            old_build_ext.finalize_options(self)
+
+            # Disable distutils parallel build, due to race conditions
+            # in numpy.distutils (Numpy issue gh-15957)
+            if self.parallel:
+                print("NOTE: -j build option not supportd. Set NPY_NUM_BUILD_JOBS=4 "
+                      "for parallel build.")
+            self.parallel = None
+
         def build_extension(self, ext):
             # When compiling with GNU compilers, use a version script to
             # hide symbols during linking.
@@ -215,6 +225,10 @@ def get_build_ext_override():
                     ext.extra_link_args = [arg for arg in ext.extra_link_args if not "version-script" in arg]
                     ext.extra_link_args.append('-Wl,--version-script=' + script_fn)
 
+            # Allow late configuration
+            if hasattr(ext, '_pre_build_hook'):
+                ext._pre_build_hook(self, ext)
+
             old_build_ext.build_extension(self, ext)
 
         def __is_using_gnu_linker(self, ext):
@@ -242,6 +256,38 @@ def get_build_ext_override():
     return build_ext
 
 
+def get_build_clib_override():
+    """
+    Custom build_clib command to tweak library building.
+    """
+    from numpy.distutils.command.build_clib import build_clib as old_build_clib
+
+    class build_clib(old_build_clib):
+        def finalize_options(self):
+            old_build_clib.finalize_options(self)
+
+            # Disable parallelization (see build_ext above)
+            self.parallel = None
+
+        def build_a_library(self, build_info, lib_name, libraries):
+            # Allow late configuration
+            hooks = build_info.get('_pre_build_hook', ())
+            _run_pre_build_hooks(hooks, (self, build_info))
+            old_build_clib.build_a_library(self, build_info, lib_name, libraries)
+
+    return build_clib
+
+
+def _run_pre_build_hooks(hooks, args):
+    """Call a sequence of pre-build hooks, if any"""
+    if hooks is None:
+        hooks = ()
+    elif not hasattr(hooks, '__iter__'):
+        hooks = (hooks,)
+    for hook in hooks:
+        hook(*args)
+
+
 def generate_cython():
     cwd = os.path.abspath(os.path.dirname(__file__))
     print("Cythonizing sources")
@@ -469,6 +515,7 @@ def setup_package():
 
         # Customize extension building
         cmdclass['build_ext'] = get_build_ext_override()
+        cmdclass['build_clib'] = get_build_clib_override()
 
         cwd = os.path.abspath(os.path.dirname(__file__))
         if not os.path.exists(os.path.join(cwd, 'PKG-INFO')):
